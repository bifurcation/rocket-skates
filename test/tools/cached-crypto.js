// Copyright (c) 2016 the rocket-skates AUTHORS.  All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

'use strict';

const jose   = require('../../lib/jose');
const pem    = require('pem');

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

const certOptions = {
  commonName: 'example.com',
  selfSigned: true
};

let serverOptions;
let key;

// CSR generated by a Go script
// * Random public key
// * Two SANs:
//  * not-example.com
//  * www.not-example.com
let csr = 'MIICoTCCAYkCAQAwGjEYMBYGA1UEAxMPbm90LWV4YW1wbGUu'
        + 'Y29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA'
        + 'q7F00dtBUeN9DHEiDRimh5OtlU0KDXw-B-04kBaZkTtXU-1G'
        + '3GW-BG9p_M0PyT7NSn5rYcdzisajTQZJD-cQgltgevWARc8d'
        + 'krIy4ogj4qihwagO-glAo20ZZoreibdL3cpOM2kmjRkkXDCF'
        + 'DXZF1kL8LhoKRg1H5dmkVcgw7ALr-AhRUHcvVmkv4XwGT_H1'
        + 'fzgutTCIMvEwnKIsn1lw6q5rK6pUktnsGQqJFrzJ_RUN_CK0'
        + 'BPg3BD9QOkwxXZ9ZTMttAIrZMuBA3wf_83_erI53s_46PMgL'
        + 'I3rDpPa9clqylSZGEDwXy8sLwQXSSuWCMLD_t99MZvDFcDjP'
        + 'SyJUaQIDAQABoEIwQAYJKoZIhvcNAQkOMTMwMTAvBgNVHREE'
        + 'KDAmgg9ub3QtZXhhbXBsZS5jb22CE3d3dy5ub3QtZXhhbXBs'
        + 'ZS5jb20wDQYJKoZIhvcNAQEFBQADggEBAFoGL91KCrF1UaT-'
        + 'ZHOoC_SfXA9O2zsLHZDAqfcciqPn85pCUDntdbxiSAmfMt_K'
        + '6PI-MqlWIR2ejZG7yYpT1Nx3UyDggRQiAS8WRPw8M9B43Ang'
        + '5HnaOX2Y7q0J0TTGQXBO3Ts8advtQcvaOJMvpAborebQizzN'
        + '0pzhMkBcAOgzZQVKWJvwqMzQsD5VJP8gw7i-HH3IROep3Ayu'
        + '74gTDYvfVyMJEIbY1D4P3FcoUcc-K0mOYlIu1a8zS6KDCRj5'
        + 'rrhR1dmMj8bd_V6e9234lXHaZFTKDPcVowT8w9LwB4DJPzQu'
        + '7b7grtynFV645q_-aSxPxJGmj7i-aayO-T00cUE';
let csrNames = ['not-example.com', 'www.not-example.com'];

// A corresponding certificate
let certHex = '3082033930820221a0030201020210a808f83734548c2d9c'
            + '7a90214b389623300d06092a864886f70d0101050500301f'
            + '311d301b060355040313144861707079204861636b657220'
            + '46616b6520434130341718323031362d30382d3136543032'
            + '3a31373a35322e3039335a1718323031362d31312d313454'
            + '30323a31373a35322e3039335a301a311830160603550403'
            + '130f6e6f742d6578616d706c652e636f6d30820122300d06'
            + '092a864886f70d01010105000382010f003082010a028201'
            + '0100abb174d1db4151e37d0c71220d18a68793ad954d0a0d'
            + '7c3e07ed38901699913b5753ed46dc65be046f69fccd0fc9'
            + '3ecd4a7e6b61c7738ac6a34d06490fe710825b607af58045'
            + 'cf1d92b232e28823e2a8a1c1a80efa0940a36d19668ade89'
            + 'b74bddca4e3369268d19245c30850d7645d642fc2e1a0a46'
            + '0d47e5d9a455c830ec02ebf8085150772f56692fe17c064f'
            + 'f1f57f382eb5308832f1309ca22c9f5970eaae6b2baa5492'
            + 'd9ec190a8916bcc9fd150dfc22b404f837043f503a4c315d'
            + '9f594ccb6d008ad932e040df07fff37fdeac8e77b3fe3a3c'
            + 'c80b237ac3a4f6bd725ab2952646103c17cbcb0bc105d24a'
            + 'e58230b0ffb7df4c66f0c57038cf4b2254690203010001a3'
            + '60305e30090603551d1304023000300b0603551d0f040403'
            + '0205a030130603551d25040c300a06082b06010505070301'
            + '302f0603551d1104283026820f6e6f742d6578616d706c65'
            + '2e636f6d82137777772e6e6f742d6578616d706c652e636f'
            + '6d300d06092a864886f70d01010505000382010100daf8bd'
            + '79561a54fc5d2fe6ddb28c94ea09e93c533588ef5aac274b'
            + '4d72eae00efdd0eb0e9673297f8c7b3bbf4a604aeb6fa6fb'
            + 'a03f570e5c9b4cb0f61a5c2bb78e0a6f8bb0679ab81ebe89'
            + '4a435142756f79997a190375db7dd7407f8d20800571b636'
            + '919b6364e90f688ba3ded680f63654b0f0a9103128b34ea4'
            + 'eeddd72534e4bade0a78f7caccb9427e9e622cee1b9a6e82'
            + 'd73972b95016c3527f93d1a1c68724f1c3e4361ac17b8378'
            + '8c0a98680cca1716a372df8d116bd227d51eb8a74bcebf1c'
            + '717b22fdca036d70a08f15e280f7e5ba02d1b080d80a0eb0'
            + 'd4c95afadaba489d0b2496fd8b8f8986560a0abbd7853ec0'
            + 'e5c25d387cbf5797ee32330793';
let cert = new Buffer(certHex, 'hex');

let duration = 90 * 24 * 60 * 60 * 1000;
let notBefore = new Date();
let notAfter = new Date(notBefore.getTime() + duration);

module.exports = {
  get tlsConfig() {
    if (serverOptions) {
      return Promise.resolve(serverOptions);
    }

    return new Promise((resolve, reject) => {
      pem.createCertificate(certOptions, (err, obj) => {
        if (err) {
          reject(err);
          return;
        }

        serverOptions = {
          key:  obj.serviceKey,
          cert: obj.certificate
        };
        resolve(serverOptions);
      });
    });
  },

  get key() {
    if (key) {
      return Promise.resolve(key);
    }

    return jose.newkey()
      .then(k => {
        key = k;
        return k;
      });
  },

  certReq: {
    csr:       csr,
    notBefore: notBefore,
    notAfter:  notAfter,
    names:     csrNames,
    cert:      cert
  }
};
